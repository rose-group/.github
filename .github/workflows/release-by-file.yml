# https://github.com/infinispan/infinispan/blob/15.2.1.Final/.github/workflows/tag.yml

name: Maven Release

on:
  workflow_call:

permissions:
  contents: write
  issues: write

env:
  MAVEN_ARGS: -B -ntp

jobs:
  release:
    runs-on: ubuntu-latest
    name: release
    steps:
      - name: Retrieve Project Metadata
        uses: radcortez/project-metadata-action@main
        id: metadata
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          metadata-file-path: '.github/project.yml'

      - name: Set environment variables
        run: |
          echo "CURRENT_VERSION=${{steps.metadata.outputs.current-version}}" >> $GITHUB_ENV
          echo "NEXT_VERSION=${{steps.metadata.outputs.next-version}}" >> $GITHUB_ENV

      - name: Validate current version
        if: contains(env.CURRENT_VERSION, 'SNAPSHOT')
        run: |
          echo '::error::Cannot release a SNAPSHOT version.'
          exit 1
          
      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git User
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set up Java 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'zulu'
          cache: maven
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_SECRET_KEY }} # macOS: gpg --armor --export-secret-key
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Detect Maven Wrapper
        run: |
          if [ -f mvnw ]; then
            echo "MAVEN_EXEC=./mvnw" >> $GITHUB_ENV
          else
            echo "MAVEN_EXEC=mvn" >> $GITHUB_ENV
          fi

      - name: Set Release version to ${CURRENT_VERSION}
        run: |
          ${MAVEN_EXEC} -B versions:set -DprocessAllModules=true -DgenerateBackupPoms=false -DnewVersion=${CURRENT_VERSION}
          git commit --no-verify -a -m "[CI Skip] Releasing ${CURRENT_VERSION}"

      - name: Publish to Central
        run: ${MAVEN_EXEC} -B -DskipTests -Prelease deploy
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.SIGNING_PASSPHRASE }}

      - name: Tag v${CURRENT_VERSION}
        run: |
          git tag -a "v${CURRENT_VERSION}" -m "Release v${CURRENT_VERSION}"

      - name: Set Next Version to ${NEXT_VERSION}
        run: |
          ${MAVEN_EXEC} -B versions:set -DprocessAllModules=true -DgenerateBackupPoms=false -DnewVersion=${NEXT_VERSION}
          git commit --no-verify -a -m "[CI Skip] Next version v${NEXT_VERSION}"

      - name: Push changes
        run: |
          git push origin $(git rev-parse --abbrev-ref HEAD)
          git push --tags

      - name: Release v${CURRENT_VERSION}
        run: |
          gh release create v${CURRENT_VERSION} --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Milestone
        uses: rose-group/milestone-release-action@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          milestone-title: ${{steps.metadata.outputs.current-version}}
          milestone-next: ${{ steps.metadata.outputs.next-version }}